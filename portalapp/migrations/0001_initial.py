# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-08-21 08:57
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(db_index=True, max_length=255, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasicInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dob', models.DateField(default=django.utils.timezone.now)),
                ('phone', models.CharField(default=b'XXXXXXX', max_length=12)),
                ('alternate_phone', models.CharField(default=b'XXXXXXXX', max_length=12)),
                ('city', models.CharField(default=b'Bengaluru', max_length=50)),
                ('state', models.CharField(choices=[(b'Andhra Pradesh', b'Andhra Pradesh'), (b'Arunachal Pradesh', b'Arunachal Pradesh'), (b'Assam', b'Assam'), (b'Bihar', b'Bihar'), (b'Chhattisgarh', b'Chhattisgarh'), (b'Goa', b'Goa'), (b'Gujarat', b'Gujarat'), (b'Haryana', b'Haryana'), (b'Himachal Pradesh', b'Himachal Pradesh'), (b'Jammu and Kashmir', b'Jammu and Kashmir'), (b'Jharkhand', b'Jharkhand'), (b'Karnataka', b'Karnataka'), (b'Kerala', b'Kerala'), (b'Madhya Pradesh', b'Madhya Pradesh'), (b'Maharashtra', b'Maharashtra'), (b'Manipur', b'Manipur'), (b'Meghalaya', b'Meghalaya'), (b'Mizoram', b'Mizoram'), (b'Nagaland', b'Nagaland'), (b'Odisha', b'Odisha'), (b'Punjab', b'Punjab'), (b'Rajasthan', b'Rajasthan'), (b'Sikkim', b'Sikkim'), (b'Tamil Nadu', b'Tamil Nadu'), (b'Telangana', b'Telangana'), (b'Tripura', b'Tripura'), (b'Uttar Pradesh', b'Uttar Pradesh'), (b'Uttarakhand', b'Uttarakhand'), (b'West Bengal', b'West Bengal'), (b'Andaman and Nicobar Islands', b'Andaman and Nicobar Islands'), (b'Chandigarh', b'Chandigarh'), (b'Dadar and Nagar Haveli', b'Dadar and Nagar Haveli'), (b'Daman and Diu', b'Daman and Diu'), (b'Delhi', b'Delhi'), (b'Lakshadweep', b'Lakshadweep'), (b'Puducherry', b'Puducherry')], default=b'Karnataka', max_length=50)),
                ('country', models.CharField(default=b'India', max_length=50)),
                ('interest', models.CharField(default=b'Web Development', max_length=200)),
                ('website', models.CharField(default=b'https://bbc.com/', max_length=200)),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('education_level', models.CharField(default=b'B.Tech.', max_length=150)),
                ('branch', models.CharField(default=b'Compuetr Science Engineering', max_length=150)),
                ('institute', models.CharField(default=b'VNIT Nagpur', max_length=150)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('designation', models.CharField(default=b'Software Developer', max_length=150)),
                ('company', models.CharField(default=b'SAP', max_length=150)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bio', models.TextField(blank=True)),
                ('image', models.URLField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skill', models.CharField(default=b'Java', max_length=150)),
                ('last_used', models.DateField(default=django.utils.timezone.now)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portalapp.Profile')),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='experience',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portalapp.Profile'),
        ),
        migrations.AddField(
            model_name='education',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portalapp.Profile'),
        ),
        migrations.AddField(
            model_name='basicinfo',
            name='profile',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='portalapp.Profile'),
        ),
    ]
